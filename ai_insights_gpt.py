"""
AI Insights Generator using OpenAI GPT for NOI Analyzer

This module generates professional real estate accounting insights from NOI comparison results.
It uses the OpenAI GPT API to generate insights in a professional, concise manner.
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional
from openai import OpenAI
from config import get_openai_api_key

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ai_insights_gpt')

# Initialize OpenAI client
api_key = get_openai_api_key()
openai_client = OpenAI(api_key=api_key)

def generate_insights_with_gpt(comparison_results: Dict[str, Any], property_name: str = "") -> Dict[str, Any]:
    """
    Generate professional real estate accounting insights from DETAILED NOI comparison results using GPT.

    Args:
        comparison_results: Results from calculate_noi_comparisons() using detailed data.
        property_name: Name of the property for the analysis.

    Returns:
        Dictionary with professional insights generated by GPT.
    """
    try:
        if not api_key:
            logger.warning("OpenAI API key not available. Cannot generate insights.")
            return {
                "summary": "AI insights are not available. Please check your OpenAI API key configuration.",
                "performance": [],
                "recommendations": []
            }

        # Format the input data for the prompt
        formatted_data = format_detailed_comparison_results_for_prompt(comparison_results)
        
        # Create the prompt
        prompt = f"""
        As a senior real estate financial analyst for {property_name or "this property"}, review these detailed NOI metrics and provide professional insights.
        
        FINANCIAL DATA:
        {formatted_data}
        
        Please analyze this data and provide:
        1. A concise executive summary (2-3 sentences)
        2. 3-5 key performance observations focusing on the most significant trends
        3. 2-3 actionable recommendations based on the financial data
        
        Format your response as JSON with these exact keys:
        {{
            "summary": "Executive summary here",
            "performance": ["Observation 1", "Observation 2", ...],
            "recommendations": ["Recommendation 1", "Recommendation 2", ...]
        }}
        """
        
        # Generate the insights using GPT-4o
        # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
        # do not change this unless explicitly requested by the user
        response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a professional real estate financial analyst with expertise in NOI metrics. Provide clear, concise, and actionable insights based on the financial data provided."},
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"},
            temperature=0.5,
            max_tokens=1000
        )
        
        # Extract the response text
        response_text = response.choices[0].message.content
        
        # Parse the response
        insights = json.loads(response_text)
        logger.info(f"Successfully generated insights for property: {property_name}")
        return insights
    
    except Exception as e:
        logger.error(f"Error generating insights with GPT: {str(e)}")
        return {
            "summary": f"Error generating AI insights: {str(e)}",
            "performance": [],
            "recommendations": []
        }

def format_detailed_comparison_results_for_prompt(comparison_results: Dict[str, Any]) -> str:
    """
    Formats the DETAILED comparison results into a string for the GPT prompt.

    Args:
        comparison_results: Results from calculate_noi_comparisons() using detailed data.

    Returns:
        Formatted string with detailed comparison results.
    """
    def format_value(value):
        """Formats numbers, handling None."""
        if value is None:
            return "N/A"
        return f"${value:,.2f}"
    
    def format_change(change, percentage):
        """Formats change and percentage."""
        if change is None or percentage is None:
            return "N/A"
        
        direction = "increase" if change >= 0 else "decrease"
        return f"{format_value(change)} ({percentage:.2f}% {direction})"
    
    # Prepare text output
    output = []
    
    # Current period values
    current = comparison_results.get("current", {})
    if current:
        output.append("CURRENT PERIOD:")
        output.append(f"Revenue: {format_value(current.get('revenue'))}")
        output.append(f"Expenses: {format_value(current.get('expense'))}")
        output.append(f"NOI: {format_value(current.get('noi'))}")
        output.append("")
    
    # Month vs Prior Month
    mom = comparison_results.get("month_vs_prior", {})
    if mom:
        output.append("MONTH VS PRIOR MONTH:")
        output.append(f"Revenue Change: {format_change(mom.get('revenue_change'), mom.get('revenue_percent_change'))}")
        output.append(f"Expense Change: {format_change(mom.get('expense_change'), mom.get('expense_percent_change'))}")
        output.append(f"NOI Change: {format_change(mom.get('noi_change'), mom.get('noi_percent_change'))}")
        output.append("")
    
    # Actual vs Budget
    budget = comparison_results.get("actual_vs_budget", {})
    if budget:
        output.append("ACTUAL VS BUDGET:")
        output.append(f"Revenue Variance: {format_change(budget.get('revenue_variance'), budget.get('revenue_percent_variance'))}")
        output.append(f"Expense Variance: {format_change(budget.get('expense_variance'), budget.get('expense_percent_variance'))}")
        output.append(f"NOI Variance: {format_change(budget.get('noi_variance'), budget.get('noi_percent_variance'))}")
        output.append("")
    
    # Year vs Prior Year
    yoy = comparison_results.get("year_vs_year", {})
    if yoy:
        output.append("YEAR VS PRIOR YEAR:")
        output.append(f"Revenue Change: {format_change(yoy.get('revenue_change'), yoy.get('revenue_percent_change'))}")
        output.append(f"Expense Change: {format_change(yoy.get('expense_change'), yoy.get('expense_percent_change'))}")
        output.append(f"NOI Change: {format_change(yoy.get('noi_change'), yoy.get('noi_percent_change'))}")
    
    return "\n".join(output)

def parse_gpt_response(response_text: str) -> Dict[str, Any]:
    """
    Parse the GPT response into a structured format.

    Args:
        response_text: Raw text response from GPT.

    Returns:
        Dictionary with parsed insights.
    """
    try:
        # Try to parse as JSON
        insights = json.loads(response_text)
        
        # Ensure the required keys are present
        if not all(key in insights for key in ["summary", "performance", "recommendations"]):
            logger.warning("GPT response is missing required keys")
            # Add missing keys with empty values
            for key in ["summary", "performance", "recommendations"]:
                if key not in insights:
                    insights[key] = "" if key == "summary" else []
        
        return insights
    
    except json.JSONDecodeError:
        logger.error("Failed to parse GPT response as JSON")
        # If JSON parsing fails, try to extract sections using string parsing
        insights = {
            "summary": "",
            "performance": [],
            "recommendations": []
        }
        
        # Very basic parsing - in practice, you might need more robust parsing
        sections = response_text.split("\n\n")
        for section in sections:
            if section.startswith("Summary:") or section.startswith("Executive Summary:"):
                insights["summary"] = section.split(":", 1)[1].strip()
            elif section.startswith("Performance:") or section.startswith("Observations:"):
                points = section.split("\n")[1:]
                insights["performance"] = [p.strip().lstrip("- ") for p in points if p.strip()]
            elif section.startswith("Recommendations:"):
                points = section.split("\n")[1:]
                insights["recommendations"] = [p.strip().lstrip("- ") for p in points if p.strip()]
        
        return insights