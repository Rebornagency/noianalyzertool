"""
Enhanced AI Insights Module for NOI Analyzer with GPT Integration

This module generates professional real estate accounting insights from NOI comparison results.
It embodies the personality of a senior real estate accountant with expertise in property financial analysis.
Now includes direct GPT integration for narrative generation.
"""

import logging
import os
from typing import Dict, Any, Optional
from openai import OpenAI
from config import get_openai_api_key

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ai_insights')

def generate_consolidated_insights_with_gpt(comparison_results: Dict[str, Any], property_name: str = "") -> Dict[str, Any]:
    """
    Generate professional real estate accounting insights from NOI comparison results using GPT
    
    Args:
        comparison_results: Results from calculate_noi_comparisons()
        property_name: Name of the property for the analysis
        
    Returns:
        Dictionary with professional insights generated by GPT
    """
    logger.info(f"Generating professional insights with GPT for property: {property_name}")
    
    # Initialize OpenAI client with API key
    client = OpenAI(api_key=get_openai_api_key())
    
    # Format comparison results for the prompt
    formatted_results = format_comparison_results_for_prompt(comparison_results)
    
    # Create the prompt for GPT
    prompt = f"""
    You are a senior real estate accountant. Based on the following NOI comparisons for {property_name or "this property"}:
    
    {formatted_results}
    
    Generate:
    1. A concise executive summary.
    2. 3-5 bullet points on performance.
    3. 3-5 actionable recommendations.
    """
    
    try:
        # Call OpenAI API
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a senior real estate accountant."},
                {"role": "user", "content": prompt}
            ]
        )
        
        # Extract the content from the response
        content = response.choices[0].message.content
        
        # Parse the content into our expected format
        insights = parse_gpt_response(content)
        
        return insights
    except Exception as e:
        logger.error(f"Error generating insights with GPT: {str(e)}")
        # Fall back to the original function if GPT fails
        logger.info("Falling back to local insights generation")
        return generate_consolidated_insights(comparison_results, property_name)

def format_comparison_results_for_prompt(comparison_results: Dict[str, Any]) -> str:
    """
    Format comparison results into a string for the GPT prompt
    
    Args:
        comparison_results: Results from calculate_noi_comparisons()
        
    Returns:
        Formatted string with comparison results
    """
    formatted_text = ""
    
    if "current" in comparison_results:
        current = comparison_results["current"]
        formatted_text += f"CURRENT MONTH:\n"
        formatted_text += f"- Revenue: ${current['revenue']:,.2f}\n"
        formatted_text += f"- Expenses: ${current['expense']:,.2f}\n"
        formatted_text += f"- NOI: ${current['noi']:,.2f}\n\n"
    
    if "actual_vs_budget" in comparison_results:
        budget_comp = comparison_results["actual_vs_budget"]
        formatted_text += f"BUDGET COMPARISON:\n"
        formatted_text += f"- Budget Revenue: ${budget_comp['budget_revenue']:,.2f}\n"
        formatted_text += f"- Budget Expenses: ${budget_comp['budget_expense']:,.2f}\n"
        formatted_text += f"- Budget NOI: ${budget_comp['budget_noi']:,.2f}\n"
        formatted_text += f"- Revenue Variance: ${budget_comp['revenue_variance']:,.2f} ({budget_comp['revenue_percent_variance']:.2f}%)\n"
        formatted_text += f"- Expense Variance: ${budget_comp['expense_variance']:,.2f} ({budget_comp['expense_percent_variance']:.2f}%)\n"
        formatted_text += f"- NOI Variance: ${budget_comp['noi_variance']:,.2f} ({budget_comp['noi_percent_variance']:.2f}%)\n\n"
    
    if "year_vs_year" in comparison_results:
        yoy_comp = comparison_results["year_vs_year"]
        formatted_text += f"YEAR-OVER-YEAR COMPARISON:\n"
        formatted_text += f"- Prior Year Revenue: ${yoy_comp['prior_year_revenue']:,.2f}\n"
        formatted_text += f"- Prior Year Expenses: ${yoy_comp['prior_year_expense']:,.2f}\n"
        formatted_text += f"- Prior Year NOI: ${yoy_comp['prior_year_noi']:,.2f}\n"
        formatted_text += f"- Revenue Change: ${yoy_comp['revenue_change']:,.2f} ({yoy_comp['revenue_percent_change']:.2f}%)\n"
        formatted_text += f"- Expense Change: ${yoy_comp['expense_change']:,.2f} ({yoy_comp['expense_percent_change']:.2f}%)\n"
        formatted_text += f"- NOI Change: ${yoy_comp['noi_change']:,.2f} ({yoy_comp['noi_percent_change']:.2f}%)\n\n"
    
    if "month_vs_prior" in comparison_results:
        mom_comp = comparison_results["month_vs_prior"]
        formatted_text += f"MONTH-OVER-MONTH COMPARISON:\n"
        formatted_text += f"- Prior Month Revenue: ${mom_comp['prior_month_revenue']:,.2f}\n"
        formatted_text += f"- Prior Month Expenses: ${mom_comp['prior_month_expense']:,.2f}\n"
        formatted_text += f"- Prior Month NOI: ${mom_comp['prior_month_noi']:,.2f}\n"
        formatted_text += f"- Revenue Change: ${mom_comp['revenue_change']:,.2f} ({mom_comp['revenue_percent_change']:.2f}%)\n"
        formatted_text += f"- Expense Change: ${mom_comp['expense_change']:,.2f} ({mom_comp['expense_percent_change']:.2f}%)\n"
        formatted_text += f"- NOI Change: ${mom_comp['noi_change']:,.2f} ({mom_comp['noi_percent_change']:.2f}%)\n"
    
    return formatted_text

def parse_gpt_response(content: str) -> Dict[str, Any]:
    """
    Parse the GPT response into our expected format
    
    Args:
        content: Response content from GPT
        
    Returns:
        Dictionary with parsed insights
    """
    insights = {
        "summary": "",
        "performance": [],
        "recommendations": []
    }
    
    # Split content by sections (this is a simple approach and might need refinement)
    sections = content.split("\n\n")
    
    # Extract summary (assuming it's the first substantial paragraph)
    for section in sections:
        if len(section.strip()) > 50:  # Arbitrary length to find a substantial paragraph
            insights["summary"] = section.strip()
            break
    
    # Extract bullet points for performance and recommendations
    performance_section = False
    recommendation_section = False
    
    for line in content.split("\n"):
        line = line.strip()
        
        # Skip empty lines
        if not line:
            continue
        
        # Check for section headers
        if "performance" in line.lower() or "bullet point" in line.lower():
            performance_section = True
            recommendation_section = False
            continue
        
        if "recommendation" in line.lower() or "action" in line.lower():
            performance_section = False
            recommendation_section = True
            continue
        
        # Extract bullet points
        if line.startswith("-") or line.startswith("â€¢") or (line[0].isdigit() and line[1:3] in (". ", ") ")):
            line_content = line.split(" ", 1)[1] if line[0].isdigit() else line[2:] if line.startswith("- ") else line[1:]
            line_content = line_content.strip()
            
            if performance_section and line_content:
                insights["performance"].append(line_content)
            elif recommendation_section and line_content:
                insights["recommendations"].append(line_content)
    
    # Ensure we have at least some content in each section
    if not insights["summary"]:
        insights["summary"] = "Analysis of the financial data shows important trends in property performance."
    
    if not insights["performance"]:
        # Extract any paragraphs that might contain performance information
        for section in sections:
            if "revenue" in section.lower() or "expense" in section.lower() or "noi" in section.lower():
                insights["performance"].append(section.strip())
                break
    
    if not insights["recommendations"]:
        # Add a generic recommendation if none were found
        insights["recommendations"].append("Conduct a detailed review of the property's financial performance to identify opportunities for improvement.")
    
    return insights

# Keep the original function for fallback
def generate_consolidated_insights(comparison_results: Dict[str, Any], property_name: str = "") -> Dict[str, Any]:
    """
    Generate professional real estate accounting insights from NOI comparison results
    
    Args:
        comparison_results: Results from calculate_noi_comparisons()
        property_name: Name of the property for the analysis
        
    Returns:
        Dictionary with professional insights
    """
    logger.info(f"Generating professional insights for property: {property_name}")
    
    insights = {
        "summary": "",
        "performance": [],
        "recommendations": []
    }
    
    # Generate professional summary
    property_prefix = f"Property {property_name}" if property_name else "The subject property"
    
    if "current" in comparison_results:
        current = comparison_results["current"]
        insights["summary"] = f"{property_prefix} reports a Net Operating Income (NOI) of ${current['noi']:,.2f} for the current period. "
        insights["summary"] += f"This reflects total operating revenue of ${current['revenue']:,.2f} against total operating expenses of ${current['expense']:,.2f}. "
        
        # Add NOI margin analysis
        if current['revenue'] > 0:
            noi_margin = (current['noi'] / current['revenue']) * 100
            insights["summary"] += f"The NOI margin stands at {noi_margin:.1f}%, "
            
            if noi_margin > 65:
                insights["summary"] += "which indicates excellent operational efficiency. "
            elif noi_margin > 55:
                insights["summary"] += "reflecting strong operational performance. "
            elif noi_margin > 45:
                insights["summary"] += "which is within industry standard parameters. "
            else:
                insights["summary"] += "suggesting potential opportunities for operational improvement. "
    
    # Generate detailed performance insights with professional accounting terminology
    if "actual_vs_budget" in comparison_results:
        budget_comp = comparison_results["actual_vs_budget"]
        
        if budget_comp["noi_variance"] >= 0:
            insights["performance"].append(
                f"Budget Variance Analysis: NOI exceeds budgetary projections by ${budget_comp['noi_variance']:,.2f} "
                f"({budget_comp['noi_percent_variance']:.1f}% favorable variance). "
                f"This positive performance indicates effective operational management and revenue optimization."
            )
            
            # Add revenue/expense breakdown for positive variance
            if budget_comp["revenue_variance"] > 0 and budget_comp["expense_variance"] < 0:
                insights["performance"].append(
                    f"The favorable NOI variance is attributed to both revenue outperformance (${budget_comp['revenue_variance']:,.2f} above budget) "
                    f"and expense containment (${abs(budget_comp['expense_variance']):,.2f} below budget), "
                    f"demonstrating effective management across both revenue generation and cost control functions."
                )
            elif budget_comp["revenue_variance"] > 0:
                insights["performance"].append(
                    f"The favorable NOI variance is primarily driven by revenue outperformance of ${budget_comp['revenue_variance']:,.2f} above budget "
                    f"({budget_comp['revenue_percent_variance']:.1f}% favorable variance), "
                    f"suggesting successful implementation of revenue optimization strategies."
                )
            elif budget_comp["expense_variance"] < 0:
                insights["performance"].append(
                    f"The favorable NOI variance is primarily attributable to effective expense management, with operating costs "
                    f"${abs(budget_comp['expense_variance']):,.2f} below budgetary allocations "
                    f"({abs(budget_comp['expense_percent_variance']):.1f}% favorable variance)."
                )
        else:
            insights["performance"].append(
                f"Budget Variance Analysis: NOI falls short of budgetary projections by ${abs(budget_comp['noi_variance']):,.2f} "
                f"({abs(budget_comp['noi_percent_variance']):.1f}% unfavorable variance). "
                f"This variance warrants detailed examination of revenue streams and expense categories."
            )
            
            # Add revenue/expense breakdown for negative variance
            if budget_comp["revenue_variance"] < 0 and budget_comp["expense_variance"] > 0:
                insights["performance"].append(
                    f"The unfavorable NOI variance stems from both revenue underperformance (${abs(budget_comp['revenue_variance']):,.2f} below budget) "
                    f"and expense overruns (${budget_comp['expense_variance']:,.2f} above budget), "
                    f"indicating potential operational challenges requiring comprehensive intervention."
                )
            elif budget_comp["revenue_variance"] < 0:
                insights["performance"].append(
                    f"The unfavorable NOI variance is primarily attributable to revenue underperformance of ${abs(budget_comp['revenue_variance']):,.2f} below budget "
                    f"({abs(budget_comp['revenue_percent_variance']):.1f}% unfavorable variance), "
                    f"necessitating a review of rental rates, occupancy strategies, and ancillary income opportunities."
                )
            elif budget_comp["expense_variance"] > 0:
                insights["performance"].append(
                    f"The unfavorable NOI variance is primarily driven by expense overruns of ${budget_comp['expense_variance']:,.2f} above budgetary allocations "
                    f"({budget_comp['expense_percent_variance']:.1f}% unfavorable variance), "
                    f"suggesting a need for enhanced cost control measures and vendor contract reviews."
                )
    
    if "month_vs_prior" in comparison_results:
        mom_comp = comparison_results["month_vs_prior"]
        
        if mom_comp["noi_change"] >= 0:
            insights["performance"].append(
                f"Month-over-Month Analysis: NOI demonstrates a positive trajectory with an increase of ${mom_comp['noi_change']:,.2f} "
                f"({mom_comp['noi_percent_change']:.1f}%) compared to the prior month. "
                f"This sequential improvement reflects effective short-term operational adjustments."
            )
        else:
            insights["performance"].append(
                f"Month-over-Month Analysis: NOI exhibits a decline of ${abs(mom_comp['noi_change']):,.2f} "
                f"({abs(mom_comp['noi_percent_change']):.1f}%) compared to the prior month. "
                f"This sequential deterioration warrants investigation into recent operational changes or market shifts."
            )
    
    if "year_vs_year" in comparison_results:
        yoy_comp = comparison_results["year_vs_year"]
        
        if yoy_comp["noi_change"] >= 0:
            insights["performance"].append(
                f"Year-over-Year Analysis: NOI demonstrates a positive annual trend with an increase of ${yoy_comp['noi_change']:,.2f} "
                f"({yoy_comp['noi_percent_change']:.1f}%) compared to the same period in the prior fiscal year. "
                f"This annual improvement indicates sustainable operational enhancements and potential asset appreciation."
            )
        else:
            insights["performance"].append(
                f"Year-over-Year Analysis: NOI shows a decline of ${abs(yoy_comp['noi_change']):,.2f} "
                f"({abs(yoy_comp['noi_percent_change']):.1f}%) compared to the same period in the prior fiscal year. "
                f"This annual deterioration suggests structural challenges that may impact asset valuation if not addressed."
            )
    
    # Generate professional recommendations with specific actionable insights
    recommendations = []
    
    if "actual_vs_budget" in comparison_results:
        budget_comp = comparison_results["actual_vs_budget"]
        
        if budget_comp["noi_variance"] < 0:
            if budget_comp["revenue_variance"] < 0:
                recommendations.append(
                    "Conduct a comprehensive revenue enhancement analysis to address the unfavorable budget variance. "
                    "Consider reviewing rental rates against market comparables, implementing strategic lease renewal incentives, "
                    "and optimizing ancillary income streams such as parking, laundry, and application fees."
                )
            
            if budget_comp["expense_variance"] > 0:
                recommendations.append(
                    "Implement targeted expense reduction measures focusing on the categories with the largest unfavorable variances. "
                    "Consider renegotiating service contracts, conducting utility consumption audits, and evaluating staffing efficiency "
                    "to bring operational expenses in line with budgetary allocations."
                )
    
    if "month_vs_prior" in comparison_results:
        mom_comp = comparison_results["month_vs_prior"]
        
        if mom_comp["noi_change"] < 0:
            recommendations.append(
                "Perform a detailed month-over-month variance analysis to identify specific revenue and expense categories "
                "driving the sequential NOI decline. Implement immediate corrective actions for any operational issues "
                "and adjust short-term forecasts accordingly."
            )
    
    if "year_vs_year" in comparison_results:
        yoy_comp = comparison_results["year_vs_year"]
        
        if yoy_comp["noi_change"] < 0:
            recommendations.append(
                "Conduct a strategic asset performance review to address the year-over-year NOI decline. "
                "Consider developing a comprehensive capital improvement plan to enhance property competitiveness, "
                "reviewing property positioning within the market, and evaluating management effectiveness."
            )
    
    # Add professional general recommendations
    if len(recommendations) < 3:
        recommendations.append(
            "Implement quarterly budget reforecasting to account for changing market conditions and operational realities. "
            "This practice enhances financial planning accuracy and allows for timely strategic adjustments."
        )
        
        recommendations.append(
            "Develop a preventative maintenance program to optimize the balance between routine maintenance expenses "
            "and capital expenditures. This approach typically reduces long-term operating costs while extending asset life."
        )
        
        recommendations.append(
            "Consider implementing energy efficiency initiatives such as LED lighting retrofits, smart thermostats, and "
            "water conservation measures. These investments typically yield 15-25% utility expense reductions with ROI periods "
            "of 12-36 months, directly enhancing NOI and asset value."
        )
    
    # Ensure we have at least 3 recommendations but no more than 5
    insights["recommendations"] = recommendations[:5]
    
    return insights
